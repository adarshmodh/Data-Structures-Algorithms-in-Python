"""
so after reading the question, it looks like we could try solving this using a list of lists. 
Where each of these lists will store strings inside them, while reading the input string we can splitting them using delimiters "{", "}","|"
Then the output string can be generated by randomly choosing a sublist from every list. 

Sample input: "{I am|I'm} {working on|starting} this {online |}interview. I hope Cortx thinks I am {{very|extremely} qualified|great|awesome}{!|.}"
Sample output: "I'm working on this interview. I hope Cortx thinks I am awesome!"

Runtime analysis: O(n) because that is the time it will take to once read the whole string into list of lists and then we just have to randomly iterate through the 2d list to get the output. 

Pseudocode: (taking an easy example)

    Input string : "{I am|I'm} {working on|starting} this {online |}interview."

    list_of_lists = strings split by "{", "}"

    for list in list_of_lists:
        sublist = string inside list split by "|"
    
    output = []
    for list in list_of_sublists:
        output.append(random.choice(list))
        
    return output
"""

import re
import random

def sentence_generator(string):
    # list_of_lists = list(string.split("}"))     ##### initially tried with string.split but did not know how to deal with multiple delimiters
    list_oflists = re.split('{|}',string)         ##### found this using regular expressions 
    
    list_ofsublists = []

    for lst in list_oflists:
    	if lst and lst!=' ':                       #### making sure it is not an empty list or a list with blank space " "
    		sublist = list(lst.split("|"))
    		list_ofsublists.append(sublist)
    
    print(list_ofsublists)
    output_list = []
    for lst in list_ofsublists:
        output_list.append(random.choice(lst))
    
    return " ".join(output_list)

string = "{I am|I'm} {working on|starting} this {online |}interview. I hope Cortx thinks I am {very|extremely} qualified|great|awesome}{!|.}"
print(sentence_generator(string))